name: Add Field Automation

on:
  issue_comment:
    types: [created]

jobs:
  propagate-schema-for-pr:
    if: contains(github.event.comment.body, '/propagate')
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required to commit changes

    steps:
      - name: Get PR Details
        id: get-pr-info
        run: |
          pr_number=${{ github.event.issue.number }}
          repo=${{ github.repository }}

          # Fetch PR details using GitHub API
          pr_data=$(gh api repos/$repo/pulls/$pr_number)

          # Extract base and head branch
          base_branch=$(echo "$pr_data" | jq -r '.base.ref')
          pr_branch=$(echo "$pr_data" | jq -r '.head.ref')

          echo "Base branch: $base_branch"
          echo "PR branch: $pr_branch"

          # Store as environment variables
          echo "base_branch=$base_branch" >> $GITHUB_ENV
          echo "pr_branch=$pr_branch" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout PR Branch
        uses: actions/checkout@v4
        with:
          ref: ${{ env.pr_branch }}
          fetch-depth: 2


      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install -r automation/requirements.txt

      - name: Extract Schema changes
        run: |
          mkdir -p .auto
          git fetch origin $base_branch
          git diff origin/$base_branch...HEAD --numstat -- automation/schemas | cut -f3 > .auto/schema-files.txt
          for f in $(cat .auto/schema-files.txt)
          do
            file=$(basename $f)
            cp $f .auto/${file}.new
            git checkout origin/$base_branch -- $f
            cp $f .auto/${file}.orig
            automation/scripts/schema_extract.py .auto/${file}.new .auto/${file}.orig .auto/${file}
          done
          git reset --hard

      - name: Propagate Column code
        run: |
          for f in $(cat .auto/schema-files.txt)
          do
            echo "propagate column for $f"
            schema_file=.auto/$(basename $f)
            for col_file_spec in $(automation/scripts/list.py column_files $f)
            do
              automation/scripts/apply.py column_spec $col_file_spec ${schema_file}
            done
          done

      - name: Propagate Column transform
        run: |
          for f in $(cat .auto/schema-files.txt)
          do
            schema_file=.auto/$(basename $f)
            for col_trans_file in $(automation/scripts/list.py column_trans $f)
            do
              automation/scripts/apply.py column_trans $col_trans_file ${schema_file}
            done
          done

      - name: Propagate Fixture Data
        run: |
          for f in $(cat .auto/schema-files.txt)
          do
            schema_file=.auto/$(basename $f)
            for ci_data in $(automation/scripts/list.py fixtures $f)
            do
              automation/scripts/apply.py fixture $ci_data ${schema_file}
            done
          done

